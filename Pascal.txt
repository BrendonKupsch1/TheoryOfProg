// Brendon Kupsch
// Ceaser Cipher in Pascal

program Cipher;
uses Crt;

// Define procedures
procedure intro;
begin
    writeln('**Welcome to the Pascal Ceaser Cipher**');
end;

function encrypt(var str: string; var offset: Integer): string;
var
  i: Integer;
begin
    // each character is incremented 6 characters within ASCII
    for i := 1 to Length(str) do
        // check if value of current char is any lower or uppercase char
        case str[i] of
            'A'..'Z': str[i] := chr(ord('A') + (ord(str[i]) - ord('A') + offset) mod 26);
            'a'..'z': str[i] := chr(ord('a') + (ord(str[i]) - ord('a') + offset) mod 26);
        end;
    encrypt := str;
end;

function decrypt(var str: string; var offset: Integer): string;
var
  i: Integer;
begin
    // each character is unincremented 6 characters within ASCII
    for i := 1 to Length(str) do
        // check if value of current char is any lower or uppercase char
        case str[i] of
            'A'..'Z': str[i] := chr(ord('A') + (ord(str[i]) - ord('A') - offset + 26) mod 26);
            'a'..'z': str[i] := chr(ord('a') + (ord(str[i]) - ord('a') - offset + 26) mod 26);
        end;
    decrypt := str;
end;

function solve(var str: string): string;
var
  i: Integer;
  decrypted: string;
begin
    // try all possible offsets
    for i := 1 to 25 do
    begin
        decrypted := decrypt(str, i);
        writeln('Offset: ', i, ' -> ', decrypted);
    end;
    solve := str;
end;

procedure main;
var 
action: string;
offset: Integer;
str: string;
og: string;
i: Integer;
maxShift: Integer;

begin
    // default value for key
    offset := 1;
    str := 'HAL';
    og := str;
    writeln('Encrypting and decrypting the string "HAL" with an offset of 1');
    writeln(og + ' -> ' + encrypt(str, offset));
    og := str;
    writeln(og + ' -> ' + decrypt(str, offset));
    writeln('Solving the cipher for the string "HAL"');
    writeln(solve(str));
end;

begin 
    ClrScr;
    intro;
    main;
end.